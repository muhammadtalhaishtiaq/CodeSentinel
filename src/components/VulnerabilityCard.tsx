import React, { useState } from 'react';
import { Card } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Loader2, Copy, MessageSquare } from 'lucide-react';
import { SyntaxHighlighter } from '@/components/ui/syntax-highlighter';
import { oneDark } from 'react-syntax-highlighter/dist/esm/styles/prism';

interface VulnerabilityCardProps {
  vulnerability: {
    id: string;
    type: string;
    severity: 'critical' | 'high' | 'medium' | 'low';
    description: string;
    location: string;
    lineNumber: number;
    code?: string;
    solution?: string;
    detectedAt: string;
  };
}

export const VulnerabilityCard: React.FC<VulnerabilityCardProps> = ({ vulnerability }) => {
  const [showAiChat, setShowAiChat] = useState(false);
  const [aiQuestion, setAiQuestion] = useState('');
  const [aiResponse, setAiResponse] = useState<string | null>(null);
  const [isLoadingAi, setIsLoadingAi] = useState(false);

  const handleAskAi = async () => {
    setIsLoadingAi(true);
    try {
      // TODO: Implement AI API call
      // const response = await askAI({
      //   question: aiQuestion,
      //   context: {
      //     vulnerability,
      //     code: vulnerability.code,
      //     solution: vulnerability.solution
      //   }
      // });
      // setAiResponse(response);
    } catch (error) {
      console.error('Error asking AI:', error);
    } finally {
      setIsLoadingAi(false);
    }
  };

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text);
    // TODO: Add toast notification
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'text-red-500 bg-red-500/10';
      case 'high': return 'text-orange-500 bg-orange-500/10';
      case 'medium': return 'text-yellow-500 bg-yellow-500/10';
      case 'low': return 'text-blue-500 bg-blue-500/10';
      default: return 'text-gray-500 bg-gray-500/10';
    }
  };

  return (
    <Card className="overflow-hidden border-l-4" style={{ 
      borderLeftColor: vulnerability.severity === 'critical' ? 'rgb(239, 68, 68)' : 
                      vulnerability.severity === 'high' ? 'rgb(249, 115, 22)' :
                      vulnerability.severity === 'medium' ? 'rgb(234, 179, 8)' :
                      'rgb(59, 130, 246)'
    }}>
      <div className="p-6">
        {/* Header */}
        <div className="flex items-start justify-between mb-4">
          <div>
            <div className="flex items-center gap-2 mb-2">
              <Badge className={getSeverityColor(vulnerability.severity)}>
                {vulnerability.severity.toUpperCase()}
              </Badge>
              <span className="text-sm text-muted-foreground">
                {vulnerability.location}:{vulnerability.lineNumber}
              </span>
            </div>
            <h3 className="text-lg font-semibold">{vulnerability.type}</h3>
          </div>
        </div>

        {/* Description */}
        <p className="text-muted-foreground mb-6">{vulnerability.description}</p>

        {/* Code Blocks */}
        <div className="space-y-6">
          <div>
            <div className="flex items-center justify-between mb-2">
              <h4 className="font-medium text-red-500">Vulnerable Code</h4>
              <Button variant="ghost" size="sm" onClick={() => copyToClipboard(vulnerability.code || '')}>
                <Copy className="w-4 h-4 mr-2" />
                Copy
              </Button>
            </div>
            <div className="rounded-lg overflow-hidden">
              <SyntaxHighlighter
                language="javascript"
                style={oneDark}
                showLineNumbers
                wrapLines
                lineProps={(lineNumber) => ({
                  style: { 
                    backgroundColor: lineNumber === vulnerability.lineNumber ? 'rgba(239, 68, 68, 0.1)' : 'transparent',
                    display: 'block'
                  }
                })}
              >
                {vulnerability.code || ''}
              </SyntaxHighlighter>
            </div>
          </div>

          {vulnerability.solution && (
            <div>
              <div className="flex items-center justify-between mb-2">
                <h4 className="font-medium text-green-500">Recommended Fix</h4>
                <Button variant="ghost" size="sm" onClick={() => copyToClipboard(vulnerability.solution || '')}>
                  <Copy className="w-4 h-4 mr-2" />
                  Copy Fix
                </Button>
              </div>
              <div className="rounded-lg overflow-hidden">
                <SyntaxHighlighter
                  language="javascript"
                  style={oneDark}
                  showLineNumbers
                >
                  {vulnerability.solution}
                </SyntaxHighlighter>
              </div>
            </div>
          )}
        </div>

        {/* AI Assistant */}
        <div className="mt-6 pt-6 border-t">
          <div className="space-y-4">
            <h4 className="font-medium flex items-center gap-2">
              <MessageSquare className="w-4 h-4" />
              Ask AI Assistant
            </h4>
            
            <div className="flex flex-wrap gap-2">
              <Button 
                variant="outline" 
                size="sm" 
                onClick={() => setAiQuestion("Why is this a security issue?")}
              >
                Why is this a security issue?
              </Button>
              <Button 
                variant="outline" 
                size="sm" 
                onClick={() => setAiQuestion("How can I fix it?")}
              >
                How can I fix it?
              </Button>
              <Button 
                variant="outline" 
                size="sm" 
                onClick={() => setAiQuestion("Explain the solution")}
              >
                Explain the solution
              </Button>
            </div>

            <div className="space-y-4">
              <div className="flex gap-2">
                <Input
                  value={aiQuestion}
                  onChange={(e) => setAiQuestion(e.target.value)}
                  placeholder="Ask a question about this security issue..."
                  className="flex-1"
                />
                <Button 
                  onClick={handleAskAi} 
                  disabled={isLoadingAi || !aiQuestion.trim()}
                >
                  {isLoadingAi ? <Loader2 className="w-4 h-4 animate-spin" /> : "Ask"}
                </Button>
              </div>

              {aiResponse && (
                <div className="p-4 rounded-lg bg-muted">
                  <p className="whitespace-pre-wrap">{aiResponse}</p>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </Card>
  );
}; 